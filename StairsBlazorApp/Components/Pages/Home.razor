@page "/"
@using System.Diagnostics
@inject IJSRuntime Js

<h1>Stairs 4.0</h1>

Welcome to Stairs.

<p role="status">Barometer: @pressure</p>

<p role="status">Time: @stopWatch?.ElapsedMilliseconds</p>


<button class="btn btn-primary" @onclick="Start">Start</button>

<button class="btn btn-primary" @onclick="Stop">Stop</button>

<div>
    <canvas id="myChart1"></canvas>
</div>


@if (doneReading)
{
    <p role="status">Pressure difference: @(pressure - startPressure)</p>

    <p role="status">Time: @stopWatch?.Elapsed.ToString("mm\\:ss\\.ff")</p>
}


@code {
    private double pressure;
    private double startPressure;
    private bool isFirstReading = true;
    private bool doneReading = false;
    private List<double> lastFive = [];

    private Stopwatch? stopWatch;

    private async void Start()
    {
        await Js.InvokeVoidAsync("createChart", []);
        if (Barometer.Default.IsSupported && !Barometer.Default.IsMonitoring)
        {
            // Turn on barometer
            Barometer.Default.ReadingChanged += Barometer_ReadingChanged;
            Barometer.Default.Start(SensorSpeed.Default);
        }
        isFirstReading = true;
        doneReading = false;
        stopWatch = Stopwatch.StartNew();
    }

    private void Stop()
    {
        if (Barometer.Default.IsSupported && Barometer.Default.IsMonitoring)
        {
            // Turn off barometer
            Barometer.Default.Stop();
            Barometer.Default.ReadingChanged -= Barometer_ReadingChanged;
        }
        stopWatch?.Stop();
        doneReading = true;
    }

    private async void Barometer_ReadingChanged(object? sender, BarometerChangedEventArgs e)
    {
        pressure = e.Reading.PressureInHectopascals;

        if (isFirstReading)
        {
            startPressure = pressure;
            isFirstReading = false;
        }
        lastFive.Add(pressure);
        if (lastFive.Count >= 5)
        {
            await Js.InvokeVoidAsync("updateChart", stopWatch?.Elapsed.TotalSeconds.ToString(), lastFive.Average());
            lastFive.Clear();
        }
        StateHasChanged();
    }

}